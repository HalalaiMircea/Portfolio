
@if(Media.Length > 0)
{<div class="position-relative text-center" style="height: 300px">
    @*use display:none so all imgs are downloaded in the background, but for iframe un-render it due to no GDrive API available *@
    @foreach ((Model s, int i) in Media.Select((s, i) => (s, i)))
    {
        @(s.IsVideo
            ? i == currentIndex
                ? @<iframe src=@s.Url class=@(currentIndex == i ? "show" : "d-none") allowfullscreen></iframe>
                : null
            : @<img src=@s.Url class=@(currentIndex == i ? "show" : "d-none") alt=""/>)
    }

    <div class="dots">
        @for (var i = 0; i < Media.Length; i++)
        {
            int i1 = i;
            <span @onclick="() => GoToSlide(i1)" class=@(currentIndex == i1 ? "active" : null)></span>
        }
    </div>
</div>

<div class="d-flex justify-content-center">
    <button @onclick="Previous">◀</button>
    <button @onclick="Next">▶</button>
</div>}

@code {
    private int currentIndex = 0;

    [Parameter]
    public required Model[] Media { get; set; }

    protected override void OnParametersSet()
    {
        // If relative, append img/
        Media = Media.Select(s => !s.Url.StartsWith("http") && !s.IsVideo
            ? new Model($"img/{s.Url}")
            : s
        ).ToArray();
        currentIndex = 0;
    }

    private void Previous()
    {
        currentIndex = (currentIndex - 1 + Media.Length) % Media.Length;
    }

    private void Next()
    {
        currentIndex = (currentIndex + 1) % Media.Length;
    }

    private void GoToSlide(int idx)
    {
        currentIndex = idx;
    }

    public record Model(string Url, bool IsVideo = false);
    /*public class Model
    {
        public required string Url { get; init; }

        [DefaultValue(false)]
        // [YamlMember(DefaultValuesHandling = DefaultValuesHandling.OmitDefaults)]
        public bool IsVideo { get; init; }
    }*/

}
